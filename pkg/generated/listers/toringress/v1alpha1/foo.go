/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "github.com/einyx/tor-ingress-controller/pkg/apis/toringress/v1alpha1"
)

// TorLister helps list Tors.
type TorLister interface {
	// List lists all Tors in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Tor, err error)
	// Tors returns an object that can list and get Tors.
	Tors(namespace string) TorNamespaceLister
	TorListerExpansion
}

// torLister implements the TorLister interface.
type torLister struct {
	indexer cache.Indexer
}

// NewTorLister returns a new TorLister.
func NewTorLister(indexer cache.Indexer) TorLister {
	return &torLister{indexer: indexer}
}

// List lists all Tors in the indexer.
func (s *torLister) List(selector labels.Selector) (ret []*v1alpha1.Tor, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Tor))
	})
	return ret, err
}

// Tors returns an object that can list and get Tors.
func (s *torLister) Tors(namespace string) TorNamespaceLister {
	return torNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TorNamespaceLister helps list and get Tors.
type TorNamespaceLister interface {
	// List lists all Tors in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Tor, err error)
	// Get retrieves the Tor from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Tor, error)
	TorNamespaceListerExpansion
}

// torNamespaceLister implements the TorNamespaceLister
// interface.
type torNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Tors in the indexer for a given namespace.
func (s torNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Tor, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Tor))
	})
	return ret, err
}

// Get retrieves the Tor from the indexer for a given namespace and name.
func (s torNamespaceLister) Get(name string) (*v1alpha1.Tor, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("tor"), name)
	}
	return obj.(*v1alpha1.Tor), nil
}
